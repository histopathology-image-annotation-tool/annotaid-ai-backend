[tool.poetry]
name = "annotaidaibe"
version = "0.2.2"
description = "Annotaid AI BE"
authors = ["Adam Bublav√Ω <xbublavy@stuba.sk>"]
license = "AGPL-3.0-or-later"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11,<3.13"
pydantic-settings = "^2.0.3"
pillow = "^10.1.0"
celery = {extras = ["redis"], version = "^5.3.5"}
sqlalchemy = "^2.0.28"
alembic = "^1.13.1"
geoalchemy2 = "^0.14.6"

[tool.poetry.group.api.dependencies]
fastapi = "^0.110.1"
uvicorn = {extras = ["standard"], version = "^0.24.0.post1"}
numpy = "^1.26.1"
asyncpg = "^0.29.0"

[tool.poetry.group.celery.dependencies]
flower = "^2.0.1"
torch = "2.0.1"
nvidia-cublas-cu11 = { version = "11.10.3.66", platform = 'linux' }
nvidia-cuda-cupti-cu11 = { version = "0.2.2", platform = 'linux' }
nvidia-cuda-nvrtc-cu11 = { version = "0.2.2", platform = 'linux' }
nvidia-cuda-runtime-cu11 = { version = "0.2.2", platform = 'linux' }
nvidia-cudnn-cu11 = { version = "8.5.0.96", platform = 'linux' }
nvidia-cufft-cu11 = { version = "10.9.0.58", platform = 'linux' }
nvidia-curand-cu11 = { version = "10.2.10.91", platform = 'linux' }
nvidia-cusolver-cu11 = { version = "11.4.0.1", platform = 'linux' }
nvidia-cusparse-cu11 = { version = "11.7.4.91", platform = 'linux' }
nvidia-nccl-cu11 = { version = "0.2.2", platform = 'linux' }
nvidia-nvtx-cu11 = { version = "0.2.2", platform = 'linux' }
triton = { version = "0.2.2", platform = 'linux' }
torchvision = "0.15.2"
scikit-image = "^0.22.0"
imantics = "^0.1.12"
albumentations = "^1.3.1"
patchify = "^0.2.3"
monai = "^1.3.0"
ultralytics = "^8.0.208"
dill = "^0.3.7"
efficientnet-pytorch = "^0.7.1"
segment-anything = {git = "https://github.com/facebookresearch/segment-anything.git"}
sahi = "^0.11.15"
httpx = "^0.27.0"
opencv-contrib-python = "^4.9.0.80"
psycopg2-binary = "^2.9.9"

[tool.poetry.group.dev.dependencies]
mypy = "^1.6.1"
flake8 = "^6.1.0"
isort = "^5.12.0"
nbqa = "^1.7.0"
pre-commit = "^3.5.0"
ipykernel = "^6.25.2"
autopep8 = "^2.0.4"
safety = "^2.3.5"
pytest = "^7.4.2"
pytest-cov = "^4.1.0"

[[tool.poetry.source]]
name = "fury"
url = "https://pypi.fury.io/hiat-app/"
priority = "supplemental"

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
minversion = "2.0"
addopts = "-rfEX -p pytester --strict-markers"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test", "Acceptance"]
python_functions = ["test"]
# NOTE: "doc" is not included here, but gets tested explicitly via "doctesting".
testpaths = ["tests"]
xfail_strict = true
filterwarnings = [
    "error",
    "default:Using or importing the ABCs:DeprecationWarning:unittest2.*",
    # produced by older pyparsing<=2.2.0.
    "default:Using or importing the ABCs:DeprecationWarning:pyparsing.*",
    "default:the imp module is deprecated in favour of importlib:DeprecationWarning:nose.*",
    # distutils is deprecated in 3.10, scheduled for removal in 3.12
    "ignore:The distutils package is deprecated:DeprecationWarning",
    # produced by python3.6/site.py itself (3.6.7 on Travis, could not trigger it with 3.6.8)."
    "ignore:.*U.*mode is deprecated:DeprecationWarning:(?!(pytest|_pytest))",
    # produced by pytest-xdist
    "ignore:.*type argument to addoption.*:DeprecationWarning",
    # produced on execnet (pytest-xdist)
    "ignore:.*inspect.getargspec.*deprecated, use inspect.signature.*:DeprecationWarning",
    # pytest's own futurewarnings
    "ignore::pytest.PytestExperimentalApiWarning",
    # Do not cause SyntaxError for invalid escape sequences in py37.
    # Those are caught/handled by pyupgrade, and not easy to filter with the
    # module being the filename (with .py removed).
    "default:invalid escape sequence:DeprecationWarning",
    # ignore use of unregistered marks, because we use many to test the implementation
    "ignore::_pytest.warning_types.PytestUnknownMarkWarning",
]

[tool.autopep8]
in-place = true
recursive = true
aggresive = 2
experimental = true

[tool.isort]
profile = "wemake"

[tool.semantic_release]
assets = []
commit_message = "chore(release): v{version} [skip ci]"
commit_parser = "angular"
logging_use_named_masks = false
major_on_zero = true
tag_format = "v{version}"
version_variables = [
    "pyproject.toml:version",
]

[tool.semantic_release.branches.main]
match = "(main)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
default_bump_level = 0

[semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false

[semantic_release.remote.token]
env = "GH_TOKEN"

[semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = false
